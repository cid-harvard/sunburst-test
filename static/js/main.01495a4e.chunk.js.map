{"version":3,"sources":["components/Chart.js","pages/CitiesAllNodes.js","pages/CitiesSmallNodeBucket.js","pages/CitiesAggregateToCountry.js","pages/CitiesAggregateToCountryExceptCurrent.js","pages/LandingPage.js","App.js","serviceWorker.js","index.js"],"names":["SunburstChart","rawData","name","maxLevels","excludeRoot","bucket","showCurrentCountry","chart","Sunburst","data","percent","children","forEach","datum","topLevelParentId","id","title","value","color","lighten","existingNodeIndex","findIndex","node","existingSmallDataNodeIndex","push","containerRef","useRef","useEffect","current","width","offsetWidth","radiusScaleExponent","minSliceAngle","centerRadius","onClick","n","length","focusOnNode","tooltipTitle","parseFloat","toFixed","sort","a","b","ref","Root","styled","div","destBostonEmployeeData","JSON","parse","App","LandingPage","to","exact","path","component","CitiesAllNodes","CitiesSmallNodeBucket","CitiesAggregateToCountry","CitiesAggregateToCountryExceptCurrent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0TA8IeA,MAxIf,YAA6F,IAArEC,EAAoE,EAApEA,QAASC,EAA2D,EAA3DA,KAAMC,EAAqD,EAArDA,UAAWC,EAA0C,EAA1CA,YAAaC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,mBAE/DC,EAAQC,cAERC,EAAO,CACXP,OACAQ,QAAS,IACTC,SAAU,IAIZV,EAAQW,SAAQ,SAACC,GAAW,IAEtBC,EADGC,EAAoBF,EAApBE,GAAIC,EAAgBH,EAAhBG,MAAOC,EAASJ,EAATI,MAEZC,EAAQD,EAAQ,IAAOE,YAAQ,GAAKN,EAAMK,OAASL,EAAMK,MAG3DJ,EAFAR,GAAiD,QAA3BO,EAAMC,iBAC1BT,GAAUY,EAAQ,IACD,6BAEAD,EAGFH,EAAMC,iBAE3B,IAAMM,EAAoBX,EAAKE,SAASU,WAAU,qBAAEN,KAAeD,KACnE,IAA2B,IAAvBM,EAA0B,CAC5B,IAAME,EAAO,CACXP,KAAIb,KAAMc,EAAOC,QAAOC,QAAOR,QAASO,GAE1C,GAAIZ,GAAUY,EAAQ,OAAUX,GAAiD,QAA3BO,EAAMC,kBAA6B,CACvF,IAAMS,EACJd,EAAKE,SAASS,GAAmBT,SAASU,WAAU,qBAAEN,KAAeD,EAjChD,6BAkCa,IAAhCS,GACFd,EAAKE,SAASS,GAAmBT,SAASY,GAA4Bb,SAAWO,EACjFR,EAAKE,SAASS,GAAmBT,SAASY,GAA4BZ,SAASa,KAA/E,eAAwFF,KAExFb,EAAKE,SAASS,GAAmBT,SAASa,KAAK,CAC7CtB,KAAM,aAAeY,EAAmB,eACxCC,GAAID,EAxCe,yBAyCnBI,QACAR,QAASO,EACTN,SAAU,CAAC,eAAIW,WAInBb,EAAKE,SAASS,GAAmBT,SAASa,KAAKF,GAEjDb,EAAKE,SAASS,GAAmBV,SAAWO,MACvC,CACL,IAAIK,EAyBFA,EAxBIhB,GAAiD,QAA3BO,EAAMC,iBAwBzBT,GAAUY,EAAQ,IAAO,CAC9Bf,KAAMY,EACNC,GAAID,EACJI,QACAR,QAASO,EACTN,SAAU,CAAC,CACTI,GAAID,EAlFe,yBAmFnBZ,KAAMA,EAAO,OAASY,EAAmB,8BACzCJ,QAASO,EACTC,WAEA,CAACH,KAAIb,KAAMc,EAAOC,QAAOC,QAAOR,QAASO,GAlCtCZ,GAAUY,EAAQ,IAAO,CAC9Bf,KAAMY,EACNC,GAAID,EACJI,QACAR,QAASO,EACTN,SAAU,CAAC,CACTI,GAAID,EA3De,yBA4DnBZ,KAAMA,EAAO,OAASY,EAAmB,8BACzCG,QACAP,QAASO,EACTC,QACAP,SAAU,CAAC,CAACI,KAAIb,KAAMc,EAAOC,QAAOP,QAASO,EAAOC,aAEpD,CACFhB,KAAMY,EACNC,GAAID,EACJI,QACAR,QAASO,EACTN,SAAU,CAAC,CACTI,KAAIb,KAAMc,EAAOC,QAAOC,QAAOR,QAASO,KAiB9CR,EAAKE,SAASa,KAAKF,OAGvB,IAAMG,EAAeC,iBAAO,MAwC5B,OAtCAC,qBAAU,WACR,IAAML,EAAOG,EAAaG,QACtBN,IACFf,EACGsB,MAAMP,EAAKQ,aACXD,MAAM,KACNpB,KAAKA,EAHRF,CAGce,GACXlB,YAAYA,GACZc,MAAM,SACNa,oBAAoB,GACpBC,cAAc,GACd7B,UAAUA,GACV8B,aAAa,IACbC,SAAQ,SAAAC,GACHA,GAAKA,EAAExB,UAAYwB,EAAExB,SAASyB,QAChC7B,EAAM8B,YAAYF,MAGrBG,cAAa,SAAAH,GACZ,OAAIA,EAAEzB,QACGyB,EAAEjC,KAAO,KAAOqC,WAAWJ,EAAEzB,QAAQ8B,QAAQ,IAAM,IAEnDL,EAAEjC,QAIXI,GACFC,EAAMkC,MAAK,SAACC,EAAGC,GACb,MAAqB,YAAjBD,EAAEjC,KAAKS,OACD,EAED,QAKd,CAACO,EAAchB,EAAMF,EAAOJ,EAAWC,EAAaE,IAGrD,yBAAKsC,IAAKnB,K,iHCpId,IAAMoB,EAAOC,IAAOC,IAAV,KAKJC,EAAyBC,KAAKC,MAAL,ow3zBAiBhBC,MAff,WAEE,OACE,kBAACN,EAAD,KACE,kBAAC,EAAD,CACE5C,QAAS+C,EACT9C,KAAK,aACLC,UAAW,EACXC,aAAa,EACbC,QAAQ,M,0GChBhB,IAAMwC,EAAOC,IAAOC,IAAV,KAKJC,EAAyBC,KAAKC,MAAL,ow3zBAiBhBC,MAff,WAEE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACElD,QAAS+C,EACT9C,KAAK,aACLC,UAAW,EACXC,aAAa,EACbC,QAAQ,M,0GChBhB,IAAMwC,EAAOC,IAAOC,IAAV,KAKJC,EAAyBC,KAAKC,MAAL,ow3zBAiBhBC,MAff,WAEE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACElD,QAAS+C,EACT9C,KAAK,aACLC,UAAW,EACXC,aAAa,EACbC,QAAQ,M,0GChBhB,IAAMwC,EAAOC,IAAOC,IAAV,KAKJC,EAAyBC,KAAKC,MAAL,ow3zBAkBhBC,MAhBf,WAEE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACElD,QAAS+C,EACT9C,KAAK,aACLC,UAAW,EACXC,aAAa,EACbC,QAAQ,EACRC,oBAAoB,MCPb8C,MAZf,WAEE,OACE,4BACE,4BAAI,kBAAC,IAAD,CAAMC,GAAG,qBAAT,qBACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,wBAAT,qBAAmD,IAAnD,WACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,2BAAT,+BACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,0CAAT,yDCkBKF,MAff,WAEE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAM,oBAAqBC,UAAWC,IACnD,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAM,uBAAwBC,UAAWE,IACtD,kBAAC,IAAD,CAAOJ,OAAK,EAACC,KAAM,0BAA2BC,UAAWG,IACzD,kBAAC,IAAD,CAAOL,OAAK,EAACC,KAAM,yCAA0CC,UAAWI,IACxE,kBAAC,IAAD,CAAOJ,UAAWJ,OCVNS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.01495a4e.chunk.js","sourcesContent":["import React, {useRef, useEffect} from 'react';\nimport Sunburst from 'sunburst-chart';\nimport {lighten} from 'polished';\n\nconst smallDatapointIdSuffix = 'smallDatapointIdSuffix';\n\nfunction SunburstChart({rawData, name, maxLevels, excludeRoot, bucket, showCurrentCountry}) {\n\n  const chart = Sunburst();\n\n  const data = {\n    name,\n    percent: 100,\n    children: [],\n  }\n\n  // transform data to match structure\n  rawData.forEach((datum) => {\n    const {id, title, value} = datum;\n    let topLevelParentId;\n    const color = value < 0.15 ? lighten(0.3, datum.color) : datum.color;\n    if (showCurrentCountry && datum.topLevelParentId === 'USA') {\n      if (bucket && value < 0.15) {\n        topLevelParentId = 'Cities in USA with < 0.15%';\n      } else {\n        topLevelParentId = title;\n      }\n    } else {\n      topLevelParentId = datum.topLevelParentId;\n    }\n    const existingNodeIndex = data.children.findIndex(({id}) => id === topLevelParentId);\n    if (existingNodeIndex !== -1) {\n      const node = {\n        id, name: title, value, color, percent: value,\n      };\n      if (bucket && value < 0.15 && !(showCurrentCountry && datum.topLevelParentId === 'USA')) {\n        const existingSmallDataNodeIndex =\n          data.children[existingNodeIndex].children.findIndex(({id}) => id === topLevelParentId + smallDatapointIdSuffix);\n        if (existingSmallDataNodeIndex !== -1) {\n          data.children[existingNodeIndex].children[existingSmallDataNodeIndex].percent += value;\n          data.children[existingNodeIndex].children[existingSmallDataNodeIndex].children.push({...node});\n        } else {\n          data.children[existingNodeIndex].children.push({\n            name: 'Cities in ' + topLevelParentId + ' with <0.15%',\n            id: topLevelParentId + smallDatapointIdSuffix,\n            color,\n            percent: value,\n            children: [{...node}]\n          });\n        }\n      } else {\n        data.children[existingNodeIndex].children.push(node);\n      }\n      data.children[existingNodeIndex].percent += value;\n    } else {\n      let node;\n      if (!(showCurrentCountry && datum.topLevelParentId === 'USA')) {\n        node = bucket && value < 0.15 ? {\n          name: topLevelParentId,\n          id: topLevelParentId,\n          color,\n          percent: value,\n          children: [{\n            id: topLevelParentId + smallDatapointIdSuffix,\n            name: name + ' in ' + topLevelParentId + ' with <0.15% representation',\n            value,\n            percent: value,\n            color,\n            children: [{id, name: title, value, percent: value, color}]\n          }]\n        } : {\n          name: topLevelParentId,\n          id: topLevelParentId,\n          color,\n          percent: value,\n          children: [{\n            id, name: title, value, color, percent: value,\n          }]\n        }\n      } else {\n        node = bucket && value < 0.15 ? {\n          name: topLevelParentId,\n          id: topLevelParentId,\n          color,\n          percent: value,\n          children: [{\n            id: topLevelParentId + smallDatapointIdSuffix,\n            name: name + ' in ' + topLevelParentId + ' with <0.15% representation',\n            percent: value,\n            color,\n          }]\n        } : {id, name: title, value, color, percent: value}\n      }\n      data.children.push(node)\n    }\n  });\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    const node = containerRef.current;\n    if (node) {\n      chart\n        .width(node.offsetWidth)\n        .width(500)\n        .data(data)(node)\n        .excludeRoot(excludeRoot)\n        .color('color')\n        .radiusScaleExponent(1)\n        .minSliceAngle(0)\n        .maxLevels(maxLevels)\n        .centerRadius(0.3)\n        .onClick(n => {\n          if (n && n.children && n.children.length) {\n            chart.focusOnNode(n);\n          }\n        })\n        .tooltipTitle(n => {\n          if (n.percent) {\n            return n.name + ': ' + parseFloat(n.percent.toFixed(2)) + '%';\n          } else {\n            return n.name;\n          }\n        })\n\n      if (showCurrentCountry) {\n        chart.sort((a, b) => {\n          if (a.data.color === '#ff0029') {\n            return -1;\n          } else {\n            return 1;\n          }\n        })\n      }\n    }\n  }, [containerRef, data, chart, maxLevels, excludeRoot, showCurrentCountry])\n\n  return (\n    <div ref={containerRef}>\n    </div>\n  );\n}\n\nexport default SunburstChart;\n","import React from 'react';\nimport SunburstChart from '../components/Chart';\nimport raw from 'raw.macro';\nimport styled from 'styled-components';\n\nconst Root = styled.div`\n  width: 800px;\n  height: 500px;\n`;\n\nconst destBostonEmployeeData = JSON.parse(raw('../data/boston_dest_employees.json'));\n\nfunction App() {\n\n  return (\n    <Root>\n      <SunburstChart\n        rawData={destBostonEmployeeData}\n        name='All Cities'\n        maxLevels={2}\n        excludeRoot={true}\n        bucket={false}\n      />\n    </Root>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport SunburstChart from '../components/Chart';\nimport raw from 'raw.macro';\nimport styled from 'styled-components';\n\nconst Root = styled.div`\n  width: 800px;\n  height: 500px;\n`;\n\nconst destBostonEmployeeData = JSON.parse(raw('../data/boston_dest_employees.json'));\n\nfunction App() {\n\n  return (\n    <Root>\n      <SunburstChart\n        rawData={destBostonEmployeeData}\n        name='All Cities'\n        maxLevels={2}\n        excludeRoot={true}\n        bucket={true}\n      />\n    </Root>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport SunburstChart from '../components/Chart';\nimport raw from 'raw.macro';\nimport styled from 'styled-components';\n\nconst Root = styled.div`\n  width: 800px;\n  height: 500px;\n`;\n\nconst destBostonEmployeeData = JSON.parse(raw('../data/boston_dest_employees.json'));\n\nfunction App() {\n\n  return (\n    <Root>\n      <SunburstChart\n        rawData={destBostonEmployeeData}\n        name='All Cities'\n        maxLevels={2}\n        excludeRoot={false}\n        bucket={true}\n      />\n    </Root>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport SunburstChart from '../components/Chart';\nimport raw from 'raw.macro';\nimport styled from 'styled-components';\n\nconst Root = styled.div`\n  width: 800px;\n  height: 500px;\n`;\n\nconst destBostonEmployeeData = JSON.parse(raw('../data/boston_dest_employees.json'));\n\nfunction App() {\n\n  return (\n    <Root>\n      <SunburstChart\n        rawData={destBostonEmployeeData}\n        name='All Cities'\n        maxLevels={2}\n        excludeRoot={false}\n        bucket={true}\n        showCurrentCountry={true}\n      />\n    </Root>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nfunction LandingPage() {\n\n  return (\n    <ul>\n      <li><Link to='/cities-all-nodes'>Render All Nodes</Link></li>\n      <li><Link to='/cities-bucket-nodes'>Bucket Nodes with {'<'} 0.15%</Link></li>\n      <li><Link to='/cities-aggregate-nodes'>Aggregate and Bucket Nodes</Link></li>\n      <li><Link to='/cities-aggregate-nodes-except-current'>Aggregate and Bucket Nodes, Except Current Country</Link></li>\n    </ul>\n  );\n}\n\nexport default LandingPage;\n","import React from 'react';\nimport './App.css';\nimport {\n  HashRouter as Router,\n  Route,\n  Switch,\n} from 'react-router-dom';\nimport CitiesAllNodes from './pages/CitiesAllNodes';\nimport CitiesSmallNodeBucket from './pages/CitiesSmallNodeBucket';\nimport CitiesAggregateToCountry from './pages/CitiesAggregateToCountry';\nimport CitiesAggregateToCountryExceptCurrent from './pages/CitiesAggregateToCountryExceptCurrent';\nimport LandingPage from './pages/LandingPage';\n\nfunction App() {\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path={'/cities-all-nodes'} component={CitiesAllNodes} />\n        <Route exact path={'/cities-bucket-nodes'} component={CitiesSmallNodeBucket} />\n        <Route exact path={'/cities-aggregate-nodes'} component={CitiesAggregateToCountry} />\n        <Route exact path={'/cities-aggregate-nodes-except-current'} component={CitiesAggregateToCountryExceptCurrent} />\n        <Route component={LandingPage} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}